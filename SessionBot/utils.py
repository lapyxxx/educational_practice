import datetime
import sqlite3
from typing import List, Dict
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

WEEKDAYS = [
    '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
]

def get_weekday(date_str: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–æ –¥–∞—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD."""
    date = datetime.datetime.strptime(date_str, '%Y-%m-%d')
    return WEEKDAYS[date.weekday()]

def filter_schedule(schedule: List[Dict], date=None, weekday=None, event_type=None, subject=None) -> List[Dict]:
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–∞—Ç–µ, –¥–Ω—é –Ω–µ–¥–µ–ª–∏, —Ç–∏–ø—É —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã."""
    result = schedule
    if date:
        result = [s for s in result if s['date'] == date]
    if weekday:
        result = [s for s in result if get_weekday(s['date']) == weekday]
    if event_type:
        result = [s for s in result if s['type'].lower() == event_type.lower()]
    if subject:
        result = [s for s in result if subject.lower() in s['subject'].lower()]
    return result

def format_event(event: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω–æ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞, –ø—Ä–µ–¥–º–µ—Ç, —Ç–∏–ø, –≤—Ä–µ–º—è)."""
    # –≠–º–æ–¥–∑–∏ –ø–æ —Ç–∏–ø—É —Å–æ–±—ã—Ç–∏—è
    type_emoji = {
        '–ó–∞—á–µ—Ç': 'üü¢',
        '–≠–∫–∑–∞–º–µ–Ω': 'üî¥',
        '–î–∏—Ñ—Ñ. –∑–∞—á–µ—Ç': 'üü°',
        '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è': 'üîµ',
        '–í–ö–†': 'üü£',
    }
    emoji = type_emoji.get(event['type'], '‚ö™')
    # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
    subj = event['subject']
    if len(subj) > 32:
        subj = subj[:29] + '...'
    return f"{emoji} <b>{event['date']}</b> | <b>{event['time']}</b> | <b>{subj}</b> | {event['type']}"

def format_schedule(schedule: List[Dict]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã."""
    if not schedule:
        return '–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.'
    header = '<b>–î–∞—Ç–∞ | –í—Ä–µ–º—è | –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ | –¢–∏–ø</b>'
    rows = [format_event(e) for e in schedule]
    return header + '\n' + '\n'.join(rows)

async def filter_choose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    schedule = context.user_data['schedule']
    if data == 'filter_date':
        dates = unique_values(schedule, 'date')
        keyboard = [[InlineKeyboardButton(d, callback_data=f'date_{d}')] for d in dates]
        keyboard.append([InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='filter')])
        await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:', reply_markup=InlineKeyboardMarkup(keyboard))
    elif data == 'filter_weekday':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π
        keyboard = [[InlineKeyboardButton(w, callback_data=f'weekday_{w}')] for w in WEEKDAYS]
        keyboard.append([InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='filter')])
        await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:', reply_markup=InlineKeyboardMarkup(keyboard))
    elif data == 'filter_type':
        types = unique_values(schedule, 'type')
        keyboard = [[InlineKeyboardButton(t, callback_data=f'type_{t}')] for t in types]
        keyboard.append([InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='filter')])
        await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è:', reply_markup=InlineKeyboardMarkup(keyboard))
    return FILTER 